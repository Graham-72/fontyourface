<?php

/**
 * Implements hook_permission().
 */
function fontyourface_permission() {

  return array(
    'administer @font-your-face' => array(
      'title' => t('administer @font-your-face'),
      'description' => t('Change which fonts are enabled using the admin interface.'),
    ),
  );

} // fontyourface_perm

/**
 * Implements template_preprocess_page().
 */
function fontyourface_preprocess_page(&$vars) {

  $fonts = fontyourface_font_registry();

  $destination = file_build_uri('fontyourface/font.css');

  $css = '';

  $destination_directory = dirname($destination);

  if (file_prepare_directory($destination_directory, FILE_CREATE_DIRECTORY)) {

    $enabled_fonts = fontyourface_get_fonts();

    foreach ($enabled_fonts as $font) {

      $font_css = fontyourface_font_css($font);

      if ($font_css != '' && $font->css_selector != '') {
        $css .= $font->css_selector . ' { ' . $font_css . ' }' . "\n";
      } // if

      $fonts[] = $font;

    } // foreach

    file_unmanaged_save_data($css, $destination, FILE_EXISTS_REPLACE);

  } // if

  if ($css != '') {

    fontyourface_add_css_in_preprocess($vars, 'fontyourface/font.css');

  } // if

  $vars['fontyourface'] = $fonts;

} // fontyourface_preprocess_page

/**
 * Adds a stylesheet in preprocess
 */
function fontyourface_add_css_in_preprocess(&$vars, $css_path, $type = 'public') {

  if ($type == 'remote') {

    drupal_add_css($css_path, array('type' => 'external', 'group' => CSS_THEME));
    $vars['styles'] = drupal_get_css();

  } // if
  else {
  
    if ($type == 'public') {

      $css_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath() . '/' . $css_path;

    } // if

    drupal_add_css($css_path, array('group' => CSS_THEME, 'basename' => 'fontyourface-' . md5($css_path)));
    $vars['styles'] = drupal_get_css();

  } // else

} // fontyourface_add_css_in_preproce

/**
 * Gets fonts, defualt to all enabled.
 */
function fontyourface_get_fonts($where = "enabled = 1 AND css_selector != ''", $order_by = 'name ASC') {

  $fonts = array();

  $results = db_query('SELECT * FROM {fontyourface_font} WHERE ' . $where . ' ORDER BY ' . $order_by);

  while ($result = $results->fetchObject()) {
    fontyourface_add_font_tags($result);
    $fonts[] = $result;
  } // while

  return $fonts;

} // fontyourface_get_fonts

/**
 * Gets a single font.
 */
function fontyourface_get_font($fid, $clear = FALSE) {

  static $fonts = array();

  if ($clear) {
    $fonts = array();
  } // if

  if (!isset($fonts[$fid])) {

    $fonts[$fid] = db_query('SELECT * FROM {fontyourface_font} WHERE fid = :fid', array(':fid' => $fid))->fetchObject();
    fontyourface_add_font_tags($fonts[$fid]);

  } // if

  return $fonts[$fid];

} // fontyourface_get_font

/**
 * Adds tags to a font object.
 */
function fontyourface_add_font_tags(&$font) {

  $font->tags = array();

  $query = db_select('fontyourface_tag', 't');
  $tag_font_alias = $query->join('fontyourface_tag_font', 'tf', 'tf.tid = t.tid');
  $query->condition($tag_font_alias . '.fid', $font->fid);
  $query->fields('t');
  $result = $query->execute();

  foreach ($result as $tag) {
    $font->tags[$tag->tid] = $tag->name;
  } // while

} // fontyourface_add_tags_to_font

/**
 * Enables a single font.
 */
function fontyourface_enable_font(&$font) {

  db_update('fontyourface_font')
    ->fields(array('enabled' => 1))
    ->condition('fid', $font->fid)
    ->execute();
  $font->enabled = 1;

  $enable_function = $font->provider . '_fontyourface_enable';

  if (function_exists($enable_function)) {
    return $enable_function($font);
  } // if

  return TRUE;

} // fontyourface_enable_font

/**
 * Disables a single font.
 */
function fontyourface_disable_font(&$font) {

  db_update('fontyourface_font')
    ->fields(array('enabled' => 0))
    ->condition('fid', $font->fid)
    ->execute();
  $font->enabled = 0;

  $disable_function = $font->provider . '_fontyourface_disable';

  if (function_exists($disable_function)) {
    return $disable_function($font);
  } // if

  return TRUE;

} // fontyourface_disable_font

/**
 * Sets a font's CSS selector.
 */
function fontyourface_set_css_selector(&$font, $css_selector) {

  db_update('fontyourface_font')
    ->fields(array('css_selector' => $css_selector))
    ->condition('fid', $font->fid)
    ->execute();
  $font->css_selector = $css_selector;

} // fontyourface_set_css_selector

/**
 * Sets a font's CSS fallbacks.
 */
function fontyourface_set_css_fallbacks(&$font, $css_fallbacks) {

  db_update('fontyourface_font')
    ->fields(array('css_fallbacks' => $css_fallbacks))
    ->condition('fid', $font->fid)
    ->execute();
  $font->css_fallbacks = $css_fallbacks;

} // fontyourface_set_css_fallbacks

/**
 * Adds or updates font, depending on whether it already exists.
 */
function fontyourface_save_font(&$font) {

  $tags = $font->tags;
  unset($font->tags);

  $exists = db_query("SELECT fid FROM {fontyourface_font} WHERE url = :url AND provider = :provider", array(':url' => $font->url, ':provider' => $font->provider))->fetchObject();

  if ($exists) {

    $existing_font = fontyourface_get_font($exists->fid);

    $font->fid = $existing_font->fid;
    
    // Keep status, selector, and tags the same.
    
    $font->enabled = $existing_font->enabled;
    $font->css_selector = $existing_font->css_selector;
    fontyourface_add_font_tags($font);

    drupal_write_record('fontyourface_font', $font, 'fid');

  } // if
  else {

    drupal_write_record('fontyourface_font', $font);

  } // else

  db_delete('fontyourface_tag_font')
    ->condition('fid', $font->fid)
    ->execute();

  if (!is_array($tags)) {
    $tags = array();
  } // if

  fontyourface_add_tags_to_font($tags, $font->fid);

  $font->tags = $tags;

} // fontyourface_save_font

/**
 * Adds tags to font.
 */
function fontyourface_add_tags_to_font($tags, $fid) {

  foreach ($tags as $tag) {

    $tag_object = new StdClass;
    $tag_object->name = $tag;

    fontyourface_save_tag($tag_object);

    $tag_font = new StdClass;
    $tag_font->tid = $tag_object->tid;
    $tag_font->fid = $fid;

    drupal_write_record('fontyourface_tag_font', $tag_font);

  } // forach

} // fontyourface_add_tags_to_font

/**
 * Adds tag if it doesn't already exist.
 */
function fontyourface_save_tag(&$tag) {

  $exists = db_query("SELECT tid FROM {fontyourface_tag} WHERE name = :name", array(':name' => $tag->name))->fetchObject();

  if ($exists) {
    $tag->tid = $exists->tid;
  } // if
  else {
    drupal_write_record('fontyourface_tag', $tag);
  } // else

} // fontyourface_save_tag

/**
 * Gets preview from provider, if available.
 */
function fontyourface_preview($font, $text, $size) {

  fontyourface_font_registry($font);

  $function = $font->provider . '_fontyourface_preview';

  if (function_exists($function)) {
    return $function($font, $text, $size);
  } // if

  return $text;

} // fontyourface_preview

/**
 * Manages registry of fonts used on current page, to provide
 * list to fontyourface_preprocess_page().
 */
function fontyourface_font_registry($font = FALSE, $clear = FALSE) {

  static $fonts = array();

  if ($clear) {
    $fonts = array();
  } // if

  if ($font) {
    $fonts[$font->fid] = $font;
  } // if

  return $fonts;

} // fontyourface_font_registry

/**
 * Creates CSS with any properties set on font.
 */
function fontyourface_font_css($font) {

  $css = array();

  if ($font->css_family) {
    $css[] = 'font-family: ' . $font->css_family . ';';
  } // if

  if ($font->css_style) {
    $css[] = 'font-style: ' . $font->css_style . ';';
  } // if

  if ($font->css_weight) {
    $css[] = 'font-weight: ' . $font->css_weight . ';';
  } // if

  return implode(' ', $css);

} // fontyourface_font_c

/**
 * Removes all fonts and related tags from given provider.
 */
function fontyourface_provider_disable($provider) {

  // Delete all fonts.

  db_delete('fontyourface_font')
    ->condition('provider', $provider)
    ->execute();

  fontyourface_delete_unused_tags();

} // fontyourface_provider_disable

/**
 * Deletes all unused tags.
 */
function fontyourface_delete_unused_tags() {

  // Delete all unused font-tag relationships.
  
  $missing_font_query = db_select('fontyourface_tag_font', 'tf');
  $font_alias = $missing_font_query->leftJoin('fontyourface_font', 'f', 'tf.fid = f.fid');
  $missing_fonts = $missing_font_query
    ->isNull($font_alias . '.fid')
    ->fields('tf', array('fid'))
    ->execute();

  $missing_fids = array();

  foreach ($missing_fonts as $missing_font) {
    $missing_fids[] = $missing_font->fid;
  } // foreach
  
  if (count($missing_fids) > 0) {

    db_delete('fontyourface_tag_font')
      ->condition('fid', $missing_fids, 'IN')
      ->execute();

  } // if

  // Delete all unused tags.

  $missing_tag_font_query = db_select('fontyourface_tag', 't');
  $tag_font_alias = $missing_tag_font_query->leftJoin('fontyourface_tag_font', 'tf', 'tf.tid = t.tid');
  $missing_tags = $missing_tag_font_query
    ->isNull($tag_font_alias . '.fid')
    ->fields('t', array('tid'))
    ->execute();

  $missing_tids = array();

  foreach ($missing_tags as $missing_tag) {
    $missing_tids[] = $missing_tag->tid;
  } // foreach

  if (count($missing_tids) > 0) {

    db_delete('fontyourface_tag')
      ->condition('tid', $missing_tids, 'IN')
      ->execute();

  } // if

} // fontyourface_delete_unused_tags

/**
 * Logs to watchdog if logging is enabled.
 */
function fontyourface_log($message, $arguments) {

  if (variable_get('fontyourface_detailed_logging', FALSE)) {
    watchdog('@font-your-face', $message, $arguments, WATCHDOG_INFO);
  } // if

} // fontyourface_log
