<?php
// $Id$

define('TYPEKIT_API_BASE_URL', 'https://typekit.com/api/v1/json/');

/**
 * Implements hook_menu()
 */
function typekit_api_menu() {

  $items = array();

  $items['admin/build/themes/fontyourface/typekit/import'] = array(
    'title' => 'Typekit Import',
    'page callback' => 'typekit_api_import',
    'access arguments' => array('administer @font-your-face'),
    'type' => MENU_CALLBACK,
  );

  return $items;

} // typekit_api_menu

/**
 * Callback for import.
 */
function typekit_api_import() {

  typekit_api_cron();
  drupal_goto($_GET['destination']);

} // typekit_api_import

/**
 * Implements hook_cron().
 */
function typekit_api_cron() {

  $last_updated = variable_get('typekit_api_last_update', 0);

  // if (time() - (60 * 60 * 24) > $last_updated) { // update every 24 hours

    $kits = typekit_api_get_kits();

    foreach ($kits as $kit) {
    
      $kit_info = typekit_api_get_kit($kit->id);

      if (typekit_api_kit_matches_domain($kit_info, $_SERVER['HTTP_HOST'])) {
        
        // dsm($kit_info);
        
        // TODO: Get information on each variant and import into typekit_api_variant table
      
      } // if

    } // foreach

    variable_set('typekit_api_last_update', time());

  // } // if

} // typekit_api_cron

/**
 * Implements template_preprocess_page().
 */
function typekit_api_preprocess_page(&$vars) {

  if (!empty($vars['fontyourface'])) {

    $links = array();
    $fonts = typekit_api_list(FALSE);

    foreach ($vars['fontyourface'] as $used_font) {

      if ($used_font->provider == 'typekit_api') {

        // TODO: add Typekit JS for this font to <head>

      } // if

    } // foreach

  } // if

} // typekit_api_preprocess_page

/**
 * Implements hook_form_alter().
 */
function typekit_api_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'fontyourface_settings_form') {

    $form['typekit_api'] = array(
      '#type' => 'fieldset',
      '#title' => 'Typekit',
      '#weight' => -1,
      'typekit_api_token' => array(
        '#type' => 'textfield',
        '#title' => t('TypeKit API token'),
        '#description' => t('Provided at ') . l('Typekit.com/account/tokens', 'https://typekit.com/account/tokens'),
        '#default_value' => variable_get('typekit_api_token', ''),
      ),
    );

  } // if

} // typekit_api_form_alter

/**
 * Implements hook_fontyourface_info().
 */
function typekit_api_fontyourface_info() {

  $info = array(
    'typekit_api' => array(
      'name' => 'Typekit',
      'url' => 'http://typekit.com/',
      'fonts' => typekit_api_list(),
    ),
  );

  return $info;

} // typekit_api_fontyourface_info

/**
 * Provides a list of fonts for @font-your-face.
 */
function typekit_api_list($show_error = TRUE) {

  $fonts = array();

  // TODO: pull list from typekit_api_variant table

  if (count($fonts) == 0 && $show_error) {

    drupal_set_message(t('The Typekit font list has not yet been imported. !importlink or wait until the next cron run.', array('!importlink' => l('Import now', 'admin/build/themes/fontyourface/typekit/import', array('query' => drupal_get_destination())))));

  } // if

  return $fonts;

} // typekit_api_list

/**
 * Provides header with token.
 */
function typekit_api_token_headers() {

  return array('X-Typekit-Token' => variable_get('typekit_api_token', ''));

} // typekit_api_token_headers

/**
 * Gets list of kits from API.
 */
function typekit_api_get_kits() {

  $response = drupal_http_request(TYPEKIT_API_BASE_URL . 'kits', typekit_api_token_headers());

  if ($response->code == 200) {

    $data = json_decode($response->data);
    $kits = $data->kits;

  } // if

  return $kits;

} // typekit_api_get_kits

/**
 * Get a specific kit from API based on ID.
 */
function typekit_api_get_kit($kit_id) {

  $response = drupal_http_request(TYPEKIT_API_BASE_URL . 'kits/' . $kit_id, typekit_api_token_headers());

  if ($response->code == 200) {

    $data = json_decode($response->data);
    $kit = $data->kit;

  } // if

  return $kit;

} // typekit_api_get_kit

function typekit_api_kit_matches_domain($kit, $domain) {

  foreach ($kit->domains as $kit_domain) {

    if ($kit_domain == $domain) {
      return TRUE;
    } // if

  } // foreach

  return FALSE;

} // typekit_api_kit_matches_domain
